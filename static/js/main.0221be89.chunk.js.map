{"version":3,"sources":["reportWebVitals.ts","theme.ts","components/styledButton.tsx","components/tipGroup.tsx","components/inputField.tsx","components/calculator.tsx","components/result.tsx","components/tip_calculator.tsx","components/main_page.tsx","tip-app.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","darkCyan","lightGrayish2","white","theme","createTheme","palette","primary","main","secondary","common","darkGrayish1","darkGrayish2","lightGrayish1","typography","fontFamily","body1","margin","fontWeight","fontSize","body2","h1","color","h2","h3","lineHeight","letterSpacing","h4","h5","h6","status","danger","orange","components","MuiCssBaseline","styleOverrides","MuiOutlinedInput","input","textAlign","root","backgroundColor","borderColor","MuiButton","width","height","StyledButton","styled","Button","shouldForwardProp","prop","selected","TipGroup","setTips","tips","setCustomTips","customTips","handleButtonClick","event","preventDefault","button","currentTarget","value","parseInt","name","Grid","container","rowSpacing","columnSpacing","xs","label","map","item","onClick","variant","Typography","TextField","size","onChange","fieldValue","parsedValue","isNaN","labelTextStyle","InputField","fieldSymbol","errorMessage","FormControl","sx","FormHelperText","style","display","float","OutlinedInput","startAdornment","InputAdornment","position","error","undefined","target","Calculator","bill","setBill","numberOfPeople","setNumberOfPeople","alignContent","direction","marginBottom","resultText","resultLabel","Result","amount","total","handleReset","matches","useMediaQuery","resultStyle","resultLabelStyle","resultLargeStyle","rowGap","alignItems","marginTop","mainGridLargeContainer","borderRadius","mainGridSmallContainer","TipCalculator","useState","toFixed","getAmount","getTotal","columnGap","gridContainer","minHeight","MainPage","ThemeProvider","CssBaseline","justifyContent","TipApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0221be89.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { orange } from \"@mui/material/colors\";\r\nimport { createTheme } from \"@mui/material/styles\";\r\n\r\nconst strongCyan = \"#26c0ab\";\r\nconst darkCyan = \"#00494d\";\r\nconst darkGrayish1 = \"#5e7a7d\";\r\nconst darkGrayish2 = \"#7f9c9f\";\r\nconst lightGrayish1 = \"#c5e4e7\";\r\nconst lightGrayish2 = \"#f4fafa\";\r\nconst white = \"#ffffff\";\r\n\r\nconst theme = createTheme({\r\n    palette:{\r\n        primary:{\r\n            main: strongCyan,\r\n            \r\n        },\r\n        secondary:{\r\n            main: darkCyan,\r\n        },\r\n        common:{\r\n            darkGrayish1,\r\n            darkGrayish2,\r\n            lightGrayish1,\r\n            lightGrayish2,\r\n            white\r\n        }\r\n    },\r\n    typography:{\r\n        fontFamily: \"Space Mono\",\r\n        body1:{\r\n            margin: 0,\r\n            fontWeight: 400,\r\n            fontSize: '1.5rem',           \r\n        },\r\n        body2:{\r\n            margin: 0, \r\n            fontWeight: 500,\r\n            fontSize: '1.5rem',\r\n        },\r\n        h1:{\r\n            margin: 0, \r\n            fontWeight: 500,\r\n            fontSize: '1.25rem',\r\n            color: white\r\n        },\r\n        h2:{\r\n            margin: 0, \r\n            fontWeight: 500,\r\n            fontSize: '1.5rem',\r\n            color: white\r\n        },\r\n        h3:{\r\n            margin: 0,\r\n            fontWeight: 700,\r\n            fontSize: '1.5rem',\r\n            lineHeight: 1.5,\r\n            letterSpacing: \"0.5em\",\r\n        },\r\n        h4:{\r\n            margin: 0, \r\n            fontWeight: 700,\r\n            fontSize: '1rem'\r\n        },\r\n        h5:{\r\n            margin: 0, \r\n            fontWeight: 500,\r\n            fontSize: '1rem'\r\n        },\r\n        h6:{\r\n            margin: 0, \r\n            fontWeight: 700,\r\n            fontSize: '2.5rem',\r\n        }\r\n        \r\n    },\r\n    status: {\r\n      danger: orange[500],\r\n    },\r\n    components:{\r\n        MuiCssBaseline: {\r\n            styleOverrides:`\r\n                body {\r\n                    margin: 0;\r\n                }\r\n            `,\r\n        },\r\n        MuiOutlinedInput:{\r\n            styleOverrides:{              \r\n                input:{\r\n                    textAlign: \"right\"\r\n                },\r\n                root:{\r\n                    backgroundColor: lightGrayish2, \r\n                    \".MuiOutlinedInput-notchedOutline\": {\r\n                        borderColor: lightGrayish2\r\n                    }   \r\n                } \r\n            }\r\n        },\r\n        MuiButton:{\r\n            styleOverrides:{\r\n                root:{\r\n                    width:'100%', \r\n                    height:'51.5px', \r\n                    backgroundColor: darkCyan\r\n                },\r\n                   \r\n            }\r\n        },\r\n    }\r\n  });\r\n\r\n\r\nexport default theme;","import { Button, ButtonProps } from '@mui/material';\r\nimport styled from '@mui/styled-engine';\r\n\r\ninterface StyledButtonProps extends ButtonProps{\r\n    selected ?: boolean; \r\n};\r\n\r\nexport const StyledButton = styled(Button,{\r\n    shouldForwardProp: (prop) => prop !== 'selected',\r\n})<StyledButtonProps>(({selected, theme}) =>({\r\n    ...(selected &&{\r\n        backgroundColor: '#26c0ab'\r\n    }),\r\n    \r\n}));","import { Grid, TextField, Typography } from '@mui/material';\r\nimport React, {FC} from 'react';\r\nimport {StyledButton} from './styledButton';\r\n\r\ninterface ITipGroupProps{\r\n    setTips:(value:number)=>void;\r\n    tips: number;\r\n    setCustomTips:(value:string) => void;\r\n    customTips:string;\r\n}\r\n\r\nexport const TipGroup:FC<ITipGroupProps> = ({setTips, tips, setCustomTips, customTips})=>{\r\n    const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>)=>{\r\n        event.preventDefault();\r\n        const button: HTMLButtonElement = event.currentTarget;\r\n        var value = parseInt(button.name);\r\n        setCustomTips(\"\");\r\n        setTips(value);\r\n    };\r\n\r\n    const handleCustomTips = (event: React.ChangeEvent<HTMLInputElement>) =>{\r\n        const fieldValue = event.currentTarget.value;\r\n        if(!fieldValue){\r\n            setCustomTips(\"\"); \r\n            setTips(0);\r\n        }else{\r\n            const parsedValue = parseInt(fieldValue);\r\n            if (!isNaN(parsedValue)) { \r\n                setTips(parsedValue);\r\n                setCustomTips(fieldValue);\r\n            }\r\n        }     \r\n    };\r\n    const buttons =[\r\n        {name: \"5\", label:'5%'},\r\n        {name: \"10\", label:'10%'},\r\n        {name: \"15\", label:'15%'},\r\n        {name: \"25\", label:'25%'},\r\n        {name: \"50\", label:'50%'}\r\n    ];\r\n    return(\r\n        <Grid container rowSpacing={3} columnSpacing={{ xs: 3 }}>\r\n            {buttons.map((button) =>(\r\n                <Grid item xs={4} key={button.label}>\r\n                    <StyledButton \r\n                        onClick={handleButtonClick} \r\n                        variant=\"contained\" \r\n                        name={button.name} \r\n                        selected={!customTips && tips === parseInt(button.name) ? true : false}\r\n                    >\r\n                        <Typography variant=\"h2\">{button.label}</Typography>\r\n                    </StyledButton>\r\n                </Grid>\r\n            ))}\r\n            <Grid item xs={4}> \r\n                <TextField \r\n                    size=\"small\" \r\n                    label=\"Custom\" \r\n                    onChange={handleCustomTips}\r\n                    value={customTips}\r\n                />               \r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import { FormControl, FormHelperText, InputAdornment, OutlinedInput } from '@mui/material';\r\nimport React, {FC} from 'react';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport { SxProps, Theme } from '@mui/system';\r\n\r\ninterface IInputFieldProps{\r\n    label: string;\r\n    value: any;\r\n    onChange:(value: any) => void;\r\n    fieldSymbol ?: string;\r\n    errorMessage ?: string | undefined;\r\n    \r\n}\r\n\r\nconst labelTextStyle:SxProps<Theme>={\r\n    margin:0, \r\n    fontSize: '1rem', \r\n    fontWeight: 700, \r\n    color:'primary.dark' \r\n}\r\n\r\nexport const InputField:FC<IInputFieldProps> = ({label, fieldSymbol, value, onChange, errorMessage}) =>{\r\n    const handleValueChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>)=>{\r\n        if(!event.currentTarget.value){\r\n            onChange(0); \r\n        }else{\r\n            const parsedValue = parseInt(event.target.value);\r\n            if (!isNaN(parsedValue)) { \r\n                onChange(parsedValue); \r\n            }\r\n        }       \r\n    }\r\n    return (\r\n        <FormControl variant=\"outlined\" sx={{width:'100%'}}>\r\n            <FormHelperText sx={labelTextStyle} >\r\n                <span style={{display:'inline',float:\"left\"}}>{label}</span>\r\n                <span style={{display:'inline', color:'red', float:\"right\"}}>{errorMessage}</span>\r\n            </FormHelperText>\r\n            <OutlinedInput\r\n                startAdornment={\r\n                    <InputAdornment position=\"start\">\r\n                        {fieldSymbol ?? <PersonIcon />}\r\n                    </InputAdornment>}\r\n                value={value}\r\n                error={errorMessage ? true : undefined}\r\n                onChange={handleValueChange}\r\n            />               \r\n        </FormControl>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\n\r\nimport {Grid, Typography } from '@mui/material';\r\nimport { TipGroup } from './tipGroup';\r\nimport { InputField } from './inputField';\r\n\r\ninterface ICalculatorPros {\r\n    setTips: (value:number) => void;\r\n    tips: number;\r\n    bill: number;\r\n    setBill: (value: number) => void;\r\n    numberOfPeople: number;\r\n    setNumberOfPeople: (value: number) => void;\r\n    customTips: string;\r\n    setCustomTips: (value: string) => void;\r\n}\r\nexport const Calculator: FC<ICalculatorPros> = ({setTips, tips, bill, setBill, numberOfPeople, setNumberOfPeople, customTips, setCustomTips}) =>{\r\n    const errorMessage = numberOfPeople == 0 ? \"Can't be zero\" : undefined;\r\n    return(\r\n        <Grid container alignContent=\"space-between\" direction=\"row\" sx={{height:'95%'}}>\r\n            <Grid item xs={12}>\r\n                <InputField value={bill} label=\"Bill\" fieldSymbol=\"$\" onChange={setBill} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"h4\" sx={{marginBottom:'1rem'}}>Select Tip %</Typography>\r\n                <TipGroup setTips={setTips} tips={tips} setCustomTips={setCustomTips} customTips={customTips} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputField \r\n                    errorMessage={errorMessage} \r\n                    value={numberOfPeople} \r\n                    label=\"Number of People\" \r\n                    onChange={setNumberOfPeople} \r\n                />\r\n            </Grid>\r\n        </Grid> \r\n    );\r\n}","import React, { FC } from 'react';\r\nimport { Button, Grid, Typography, useMediaQuery } from '@mui/material';\r\n\r\nimport { SxProps, Theme } from '@mui/system';\r\n\r\ninterface IResultProps{\r\n    amount: string;\r\n    total: string;\r\n    handleReset: () => void;\r\n}\r\n\r\nconst resultText: SxProps<Theme> = {\r\n    color:'primary.main',\r\n    textAlign:'end'\r\n};\r\n\r\nconst resultLabel:SxProps<Theme> = {\r\n    color:'common.lightGrayish1',\r\n    margin: 0, \r\n    fontWeight: 500,\r\n    fontSize: '1rem'\r\n}\r\n\r\nexport const Result:FC<IResultProps> = ({amount, total, handleReset}) =>{\r\n    const matches = useMediaQuery('(min-width:445px)');\r\n    let resultStyle = matches ? resultText : {...resultText, fontSize: '2rem'};\r\n    let resultLabelStyle = matches ? resultLabel : {...resultLabel, fontSize: '0.75rem'};\r\n    let resultLargeStyle = matches ? {} : {fontSize: '1rem'};\r\n    return(\r\n        <Grid container alignContent=\"space-between\">\r\n            <Grid container rowGap={5} sx={{margin:'2rem'}} >\r\n                <Grid item container xs={12} alignItems=\"center\" >\r\n                    <Grid xs={6} item>\r\n                        <Typography variant=\"h1\" sx={resultLargeStyle}>\r\n                            Tip Amount\r\n                            <Typography sx={resultLabelStyle}>\r\n                                / person\r\n                            </Typography>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid xs={6} item>\r\n                        <Typography variant=\"h6\" sx={resultStyle}>\r\n                            {\"$\"+amount}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} alignItems=\"center\">\r\n                    <Grid xs={6} item>\r\n                        <Typography variant=\"h1\" sx={resultLargeStyle}>\r\n                            Total\r\n                            <Typography sx={resultLabelStyle}>\r\n                                / person\r\n                            </Typography>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid xs={6} item>\r\n                        <Typography variant=\"h6\" sx={resultStyle}>\r\n                            {\"$\"+total}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} sx={{marginTop:'4rem'}}>\r\n                    <Grid xs={12} item sx={{height:'4rem'}}>\r\n                        <Button variant=\"contained\" sx={{ backgroundColor: 'primary.main', width:'100%', height:'100%'}} onClick={handleReset}>\r\n                            <Typography variant=\"body2\">RESET</Typography>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React, {FC, useState} from 'react';\r\nimport { Grid, useMediaQuery } from '@mui/material';\r\n\r\nimport { Calculator } from './calculator';\r\nimport { Result } from './result';\r\nimport { SxProps, Theme } from '@mui/system';\r\n\r\nconst mainGridLargeContainer: SxProps<Theme> = {\r\n    width: \"40em\", \r\n    height:'30rem', \r\n    backgroundColor: 'common.white',\r\n    borderRadius: '25px',\r\n};\r\nconst mainGridSmallContainer: SxProps<Theme> = {\r\n    width: \"100%\", \r\n    height:'90%', \r\n    backgroundColor: 'common.white',\r\n    borderRadius: '25px 25px 0 0',\r\n};\r\n\r\n\r\nexport const TipCalculator:FC<{}> = () => {    \r\n    const [tips, setTips] = useState(0);\r\n    const [bill, setBill] = useState(0);\r\n    const [numberOfPeople, setNumberOfPeople] = useState(1);\r\n    const [customTips, setCustomTips] = useState<string>(\"\");\r\n    \r\n    const matches = useMediaQuery('(min-width:970px)');\r\n    \r\n    const handleReset = () =>{\r\n        setTips(0);\r\n        setBill(0);\r\n        setNumberOfPeople(1);\r\n        setCustomTips(\"\");\r\n    };\r\n\r\n    const getAmount = (bill:number, tips: number, numberOfPeople: number) =>{\r\n        let amount: string= \"0.00\";\r\n        if(numberOfPeople !== 0){\r\n            let result = (bill * (tips/100))/numberOfPeople;\r\n            amount = result.toFixed(2);\r\n        }\r\n        return amount;\r\n    };\r\n\r\n    const getTotal = (bill:number, tips: number, numberOfPeople: number) =>{\r\n        let total: string= \"0.00\";\r\n        if(numberOfPeople !== 0){\r\n            let result = (bill * (1+(tips/100)))/numberOfPeople;\r\n            total = result.toFixed(2);\r\n        }\r\n        return total;\r\n    };\r\n\r\n    let amount = getAmount(bill, tips, numberOfPeople);\r\n    let total = getTotal(bill, tips, numberOfPeople);\r\n    return(\r\n        <Grid container sx={matches ? mainGridLargeContainer : mainGridSmallContainer}> \r\n            <Grid container sx={{margin:'1.5rem' }} rowGap={matches ? undefined : 5} columnGap={matches ? 7 : undefined} >\r\n                <Grid item sx={matches ? {width:'50%'} : {width: '100%'}}>\r\n                    <Calculator \r\n                        setTips={setTips} \r\n                        tips={tips}\r\n                        bill={bill} \r\n                        setBill={setBill} \r\n                        numberOfPeople={numberOfPeople} \r\n                        setNumberOfPeople={setNumberOfPeople}  \r\n                        customTips={customTips}\r\n                        setCustomTips={setCustomTips}\r\n                    />\r\n                </Grid>\r\n                <Grid item sx={matches ? { width:'43%', backgroundColor: 'secondary.main', borderRadius: '20px'} : { width:'100%', backgroundColor: 'secondary.main', borderRadius: '20px'}}>\r\n                    <Result amount={amount} total={total} handleReset={handleReset} />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import { FC } from 'react';\r\nimport { CssBaseline, Grid, ThemeProvider, Typography } from '@mui/material';\r\n\r\nimport theme from '../theme';\r\nimport { TipCalculator } from './tip_calculator';\r\nimport { SxProps, Theme } from '@mui/system';\r\n\r\nconst gridContainer: SxProps<Theme> = {\r\n  backgroundColor: 'common.lightGrayish1',\r\n  color: \"primary.dark\",\r\n  minHeight: '100vh'\r\n};\r\n\r\nexport const MainPage:FC<{}> = () =>{\r\n  return(\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Grid sx={gridContainer} container alignContent=\"space-evenly\"> \r\n        <Grid item container alignItems=\"center\" justifyContent=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"h3\" sx={{marginBottom:'3rem'}}>\r\n              SPLI<br />TTER\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item container alignItems=\"center\" justifyContent=\"center\">\r\n            <TipCalculator />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider> \r\n  );\r\n};","import  {MainPage} from '../src/components/main_page';\r\n\r\nexport const TipApp = () =>{\r\n    return(\r\n        <MainPage />\r\n    );\r\n} ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { TipApp } from './tip-app';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TipApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}